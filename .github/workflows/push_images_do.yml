name: Push images to digital ocean

on:
  workflow_dispatch:

jobs:

  deploy_images:
    
    environment: production
    env:
      REGISTRY_URL : ${{ secrets.REGISTRY_DO }}
      GENERIC_IMAGE_URL : ${{ secrets.REGISTRY_DO }}/cloud_editor_generic:${{ secrets.VERSION }}
      NODEJS_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/cloud_editor_nodejs:${{ secrets.VERSION }}
      GOLANG_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/cloud_editor_golang:${{ secrets.VERSION }}
      GOLANG_1.17_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/cloud_editor_golang_1.17:${{ secrets.VERSION }}
      PYTHON_SPARK_IMAGE_URL : ${{ secrets.REGISTRY_DO }}/cloud_editor_python:${{ secrets.VERSION }}
      PYTHON_DATASCIENCE_IMAGE_URL : ${{ secrets.REGISTRY_DO }}/cloud_editor_python_datascience:${{ secrets.VERSION }}
      PYTHON_ANACONDA_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/cloud_editor_python_anaconda:${{ secrets.VERSION }}
      FLUTTER_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/cloud_editor_flutter:${{ secrets.VERSION }}
      JAVA_INTELLIJ_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/intellij_java:${{ secrets.VERSION }}
      GOLAND_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/goland_go:${{ secrets.VERSION }}
      PYCHARM_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/pycharm_python:${{ secrets.VERSION }}
      PHPSTORM_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/phpstorm_php:${{ secrets.VERSION }}
      ANDROID_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/android_studio:${{ secrets.VERSION }}
      INTELLIJ_ULTIMATE_IMAGE_URL: ${{ secrets.REGISTRY_DO }}/intellij_ultimate:${{ secrets.VERSION }}

    runs-on: ubuntu-latest


    steps:
      - uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITAL_OCEAN_API_TOKEN }}

      - name: Authenticate with doctl registry
        run: doctl registry login

      # Build the base image
      - name: Build the base image
        run: make base_image

      # Build the generic cloud editor image 
      - name: Build the generic cloud editor
        run: make generic_image

      - name: Tag new generic cloud editor image
        run: docker tag $(make get_generic_image) $GENERIC_IMAGE_URL

      - name: Push the generic cloud editor image
        run: docker push $GENERIC_IMAGE_URL
      
      - name: Remove generic cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

        # Build the nodejs image
      - name: Build the nodejs cloud editor
        run: make nodejs_image

      - name: Tag new nodejs cloud editor image
        run: docker tag $(make get_nodejs_image) $NODEJS_IMAGE_URL

      - name: Push the nodejs cloud editor image
        run: docker push $NODEJS_IMAGE_URL
      
      - name: Remove nodejs cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

        # Build golang image
      - name: Build the golang cloud editor
        run: make golang_image

      - name: Tag new golang cloud editor image
        run: docker tag $(make get_golang_image) $GOLANG_IMAGE_URL

      - name: Push the golang cloud editor image
        run: docker push $GOLANG_IMAGE_URL 
      
      - name: Remove golang cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

      # Build golang_1.17 image
      - name: Build the golang_1.17 cloud editor
        run: make golang_1.17_image

      - name: Tag new golang_1.17 cloud editor image
        run: docker tag $(make get_golang_1.17_image) $GOLANG_1.17_IMAGE_URL

      - name: Push the golang_1.17 cloud editor image
        run: docker push $GOLANG_1.17_IMAGE_URL 
      
      - name: Remove golang_1.17 cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

        # Build python spark
      - name: Build the python spark cloud editor
        run: make python_spark_image

      - name: Tag new python spark cloud editor image
        run: docker tag $(make get_spark_image) $PYTHON_SPARK_IMAGE_URL 

      - name: Push the python spark cloud editor image
        run: docker push $PYTHON_SPARK_IMAGE_URL
      
      - name: Remove python spark cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

      # Build python datascience

      - name: Build the python datascience cloud editor
        run: make python_datascience_image

      - name: Tag new python datascience cloud editor image
        run: docker tag $(make get_python_datascience_image) $PYTHON_DATASCIENCE_IMAGE_URL 

      - name: Push the python datascience cloud editor image
        run: docker push $PYTHON_DATASCIENCE_IMAGE_URL 
      
      - name: Remove python datascience cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

      # Build python anaconda
      - name: Build the python anaconda cloud editor
        run: make python_anaconda_image

      - name: Tag new python anaconda cloud editor image
        run: docker tag $(make get_python_anaconda_image) $PYTHON_ANACONDA_IMAGE_URL

      - name: Push the python anaconda cloud editor image
        run: docker push $PYTHON_ANACONDA_IMAGE_URL
      
      - name: Remove python anaconda cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'


      # Build flutter image 
      - name: Build the flutter cloud editor
        run: make flutter_image

      - name: Tag new flutter cloud editor image
        run: docker tag $(make get_flutter_image) $FLUTTER_IMAGE_URL

      - name: Push the flutter cloud editor image
        run:  docker push $FLUTTER_IMAGE_URL
      
      - name: Remove flutter cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

        # Build Java Intellij image
      - name: Build the java intellij cloud editor
        run: make java_intellij

      - name: Tag new java intellij cloud editor image
        run: docker tag $(make get_java_intellij_image) $JAVA_INTELLIJ_IMAGE_URL 

      - name: Push the java intellij cloud editor image
        run:  docker push $JAVA_INTELLIJ_IMAGE_URL 
      
      - name: Remove java intellij cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

      # build Goland image
      - name: Build the goland cloud editor
        run: make goland 

      - name: Tag new goland cloud editor image
        run: docker tag $(make get_goland_image) $GOLAND_IMAGE_URL

      - name: Push the goland cloud editor image
        run:  docker push $GOLAND_IMAGE_URL
      
      - name: Remove Goland cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

      # Build Pycharm image
      - name: Build the Pycharm cloud editor
        run:  make pycharm

      - name: Tag new Pycharm cloud editor image
        run: docker tag $(make get_pycharm_image) $PYCHARM_IMAGE_URL

      - name: Push the Pycharm cloud editor image
        run:  docker push $PYCHARM_IMAGE_URL 
      
      - name: Remove Pycharm cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

      # Build phpstorm
      - name: Build the PHPStorm cloud editor
        run:  make phpstorm

      - name: Tag new PHPStorm cloud editor image
        run: docker tag $(make get_phpstorm_image) $PHPSTORM_IMAGE_URL

      - name: Push the PHPStorm cloud editor image
        run:  docker push $PHPSTORM_IMAGE_URL
      
      - name: Remove PHPstorm cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'
      
      # Build Android studio
      - name: Build the Android Studio cloud editor
        run:  make android_studio

      - name: Tag new Android studio cloud editor image
        run: docker tag $(make get_android_studio_image) $ANDROID_IMAGE_URL

      - name: Push the Android Studio cloud editor image
        run:  docker push $ANDROID_IMAGE_URL
      
      - name: Remove Android Studio cloud editor image
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'

       # Build Intellij Ultimate

      - name: Build the Intellij Ultimate image
        run:  make intellij_ultimate

      - name: Tag new intellij ultimate image
        run: docker tag $(make get_intellij_ultimate_image) $INTELLIJ_ULTIMATE_IMAGE_URL

      - name: Push the Intellij Ultimate image
        run:  docker push $INTELLIJ_ULTIMATE_IMAGE_URL
      
      - name: Remove the Intellij Ultimate image url
        run: docker rmi $(docker images -a | grep -v sn_base | grep -v IMAGE  |  awk {'print $3'}) || echo 'ignoring error'